<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://nicolast.be/feed.xml" rel="self" type="application/atom+xml" /><link href="https://nicolast.be/" rel="alternate" type="text/html" /><updated>2022-02-26T17:38:10+01:00</updated><id>https://nicolast.be/feed.xml</id><title type="html">nicolast.be</title><subtitle>My blog.</subtitle><author><name>Nicolas T.</name><email>ikke@nicolast.be</email></author><entry><title type="html">A Git Branching Model for Releases with Generated Files</title><link href="https://nicolast.be/development/a-git-branching-model-for-releases-with-generated-files/" rel="alternate" type="text/html" title="A Git Branching Model for Releases with Generated Files" /><published>2017-02-28T20:27:00+01:00</published><updated>2017-02-28T20:27:00+01:00</updated><id>https://nicolast.be/development/a-git-branching-model-for-releases-with-generated-files</id><content type="html" xml:base="https://nicolast.be/development/a-git-branching-model-for-releases-with-generated-files/"><![CDATA[<p>Common wisdom dictates not to track generated files under source-control, which
is good practice: they clutter diffs and pull-requests, one needs to ensure
they’re always updated whenever changes are made,… Some platforms or
build-systems require generated files to be part of distributed packages though,
and keeping record of what gets delivered to users is of utmost importance. I
recently adopted a release/branching scheme to bridge this gap.</p>

<p>Platforms which require machine-generated files to be part of release packages
include the JavaScript ecosystem, where often packed and/or minified versions
of a set of source files (generated by tools like <a href="http://gulpjs.com">Gulp</a> or <a href="https://webpack.js.org">Webpack</a>) are
bundled in a distribution, or build systems like the <a href="https://www.gnu.org/software/automake/manual/html_node/Autotools-Introduction.html">Autotools</a> toolchain
(which brings us the familiar <code class="language-plaintext highlighter-rouge">./configure</code>, <code class="language-plaintext highlighter-rouge">make</code>, <code class="language-plaintext highlighter-rouge">make install</code> procedure)
where files like <code class="language-plaintext highlighter-rouge">configure</code> and <code class="language-plaintext highlighter-rouge">Makefile.in</code> are generated from
<code class="language-plaintext highlighter-rouge">configure.ac</code> and <code class="language-plaintext highlighter-rouge">Makefile.am</code> (and other auxiliary files).</p>

<p>The traditional approach to generate release (source) packages for such projects
is to generate the files on a developer machine, or in some <a href="https://en.wikipedia.org/wiki/Continuous_integration">CI</a> environment,
create a tarball, and store this artifact in a safe location: if one loses this
file, it may be impossible to ever recreate an exact copy of the original
release. This could e.g. be caused by later versions of the build tools to
generate slightly different results for the same input, or these tools using
‘external’ values (including time, randomness,…) during generation.</p>

<h2 id="first-attempt">First Attempt</h2>

<p>If the content of these release files is so precious, it makes sense to keep
them alongside something which is at least as valuable: the source repository of
the codebase, which contains the all code and its history. Given this, one can
come up with a scheme like the following:</p>

<style scoped=""> @import url("https://nicolast.be/assets/css/gitgraph-1.8.3.css"); </style>

<script src="https://nicolast.be/assets/js/gitgraph-1.8.3.min.js"></script>

<canvas id="gitGraph1"></canvas>
<script>
var master = new GitGraph({
  elementId: 'gitGraph1',
  template: 'metro',
  orientation: 'vertical',
  author: 'Nicolas T.',
  mode: 'extended',
}).branch('master');

master.commit('Initialize repository');
master.commit('Implement crazy feature');

master.commit('Set version number to 1.0.0');
master.commit({
  message: 'Import generated files into repository',
  tag: 'package-1.0.0',
  sha1: 'ec4e927',
  dotColor: '#f1c109',
});

master.commit({
  message: 'Revert "Import generated files into repository"',
  sha1: '12c6685',
});

master.commit('Set version number to 1.0.1-pre');
master.commit('Fix bug in crazy feature');
</script>

<p>Whilst this repository now contains a tag to a released tree which contains all
generated files, this has a major drawback: it also introduces a subsequent
commit (<code class="language-plaintext highlighter-rouge">12c6685</code>) which explicitly removes all these generated files again,
immediately following the commit in which they were added. Furthermore, this
requires one more commit to bump the version number. This clutters the
repository history.</p>

<h2 id="second-attempt">Second Attempt</h2>

<p>To overcome the sequence of <code class="language-plaintext highlighter-rouge">Import generated files</code> and subsequent revert
commits, we can try an alternative approach, stashing the imports away in
a branch:</p>

<canvas id="gitGraph2"></canvas>
<script>
var master = new GitGraph({
  elementId: 'gitGraph2',
  template: 'metro',
  orientation: 'vertical',
  author: 'Nicolas T.',
  mode: 'extended',
}).branch('master');

master.commit('Initialize repository');
master.commit('Implement crazy feature');

var release100 = master.branch('release-1.0.0');
release100.commit('Set version number to 1.0.0');
release100.commit({
  message: 'Import generated files into repository',
  tag: 'package-1.0.0',
  dotColor: '#f1c109',
});

master.commit('Set version number to 1.0.1-pre');
master.commit('Fix bug in crazy feature');
</script>

<p>Whilst this approach doesn’t require any revert of <code class="language-plaintext highlighter-rouge">Import generated files</code>
commits, it has another drawback: the relation between tags and branches is
lost. As an example, running a command like <code class="language-plaintext highlighter-rouge">git describe --tags</code> on the
<code class="language-plaintext highlighter-rouge">master</code> branch will never result in any release tags to be part of the output.</p>

<h2 id="final-approach">Final Approach</h2>

<p>Fixing the limitations of the previous approach is trivial: we simply need to
reinstate a connection between the release tag, and the development branch
(<code class="language-plaintext highlighter-rouge">master</code> in this example). How does one create a link between two branches? By
merging, of course! Here’s how this works:</p>

<canvas id="gitGraph3"></canvas>
<script>
var graph = new GitGraph({
  elementId: 'gitGraph3',
  template: 'metro',
  orientation: 'vertical',
  author: 'Nicolas T.',
  mode: 'extended',
});

var master = graph.branch('master');
master.commit('Initialize repository');
master.commit({
  message: 'Implement crazy feature',
  sha1: '43d6bf6',
});

var release100 = master.branch('release-1.0.0');
release100.commit('Set version number to 1.0.0');
release100.commit({
  message: 'Import generated files into repository',
  tag: 'package-1.0.0',
  dotColor: '#f1c109',
});

release100.merge(master, {
  message: 'Merge tag \'package-1.0.0\' into master',
  dotColor: '#a42315',
  sha1: '49e527e',
});

master.commit('Fix bug in crazy feature');
</script>

<p>As-is, this wouldn’t yield the desired result: the merge-commit in <code class="language-plaintext highlighter-rouge">49e527e</code>
would result in a tree which contains the generated files (in this specific
case the tree at <code class="language-plaintext highlighter-rouge">49e527e</code> would be equal to the <code class="language-plaintext highlighter-rouge">package-1.0.0</code> tree,
actually), which is clearly <em>not</em> what we aimed for. Instead, we should run
<code class="language-plaintext highlighter-rouge">git merge --no-commit</code> when merging <code class="language-plaintext highlighter-rouge">package-1.0.0</code> into <code class="language-plaintext highlighter-rouge">master</code>, undo all
the changes made in the <code class="language-plaintext highlighter-rouge">release-1.0.0</code> branch (i.e. remove the generated
files and reset the version number), only then to <code class="language-plaintext highlighter-rouge">git commit</code> the resulting
merge. Also note the <em>tag</em> (<code class="language-plaintext highlighter-rouge">package-1.0.0</code>) gets merged into <code class="language-plaintext highlighter-rouge">master</code>, not the
<code class="language-plaintext highlighter-rouge">release-1.0.0</code> branch (which makes only a difference when the tag is annotated,
of course).</p>

<p>Aside: you may have noticed the schema above no longer contains a <code class="language-plaintext highlighter-rouge">Set version
number to 1.0.1-pre</code> commit: this is no longer required, because one may opt to
bump the version number as part of the merge commit (<code class="language-plaintext highlighter-rouge">49e527e</code>). Some may
object against this approach and still keep a separate commit to increase the
value. Others may use some specific number for <code class="language-plaintext highlighter-rouge">master</code> versions. All of these
have pros and cons, pick one and be consistent.</p>

<p>Whilst the approach described above may seem laborious, note it’s fairly easy
to automate the workflow. Also, when using Autotools, it’s now possible to
release the output of <code class="language-plaintext highlighter-rouge">git archive</code> of a release tag, instead of relying on
<code class="language-plaintext highlighter-rouge">make dist</code>. Validating whether <code class="language-plaintext highlighter-rouge">make distcheck</code> passes, and asserting the
content of a resulting distribution package resembles an archive generated by
Git, e.g. as part of a CI pipeline, is of course good practice!</p>

<p>Finally, this approach interacts nicely with the <a href="http://www.scality.com/blog/continuous-integration-faster-releases-high-quality/">GitWaterFlow</a> branching model
we presented at <a href="http://releng.polymtl.ca/RELENG2016/html/index.html">RELENG’16</a>, but more about that later!</p>]]></content><author><name>Nicolas T.</name><email>ikke@nicolast.be</email></author><category term="Development" /><summary type="html"><![CDATA[Version Control Systems and generated files don't play nice together, though for some projects such files need to be included in release packages. This article introduces a release and branching scheme to get the best of both worlds.]]></summary></entry><entry><title type="html">Hello, world!</title><link href="https://nicolast.be/various/hello-world/" rel="alternate" type="text/html" title="Hello, world!" /><published>2017-01-31T01:39:00+01:00</published><updated>2017-01-31T01:39:00+01:00</updated><id>https://nicolast.be/various/hello-world</id><content type="html" xml:base="https://nicolast.be/various/hello-world/"><![CDATA[<p>After many years of inactivity (the last entry on <a href="http://eikke.com">eikke.com</a>
was written in 2010…) I decided to pick up blogging again. Nothing here yet,
expect more content soon!</p>

<p>For the curious: the picture above comes from <strong>The C Programming Language,
First Edition</strong> by Kernighan &amp; Ritchie, published in 1978
(<a href="https://archive.org">archive.org</a> maintains a
<a href="https://archive.org/details/TheCProgrammingLanguageFirstEdition">copy</a>, page
6). Using “Hello, world” as a textbook example for programming languages goes
way back.</p>]]></content><author><name>Nicolas T.</name><email>ikke@nicolast.be</email></author><category term="Various" /><summary type="html"><![CDATA[Every blog needs a first post...]]></summary></entry></feed>